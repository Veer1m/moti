Steps:-
### Bully Algorithm:
1. **Node Failure Detection**:
- Nodes continuously monitor the state of other nodes to detect failures.
2. **Election Initiation**:
- If a node detects a leader failure or timeouts occur, it initiates an election.
3. **Broadcast Election Message**:
- The initiating node sends an election message to all nodes with higher IDs.
4. **Candidacy Announcement**:
- Nodes with higher IDs respond, announcing their candidacy.
5. **Vote Collection**:
Name: Piyush Navin Gundecha
Roll No. - 3061
––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
- The initiating node collects responses from higher-ID nodes.
6. **Election Resolution**:
- If no higher-ID nodes respond, the initiating node becomes the leader and broadcasts a
victory message.
7. **Leader Announcement**:
- All nodes acknowledge the new leader.
8. **Leader Heartbeat**:
- The new leader periodically sends heartbeat messages to confirm its status.
### Ring Algorithm:
1. **Node Initialization**:
- Each node is assigned an ID and knows the IDs of its neighboring nodes in the ring.
2. **Election Initiation**:
- If a node detects leader failure or timeouts occur, it initiates an election.
3. **Message Passing**:
- The initiating node sends an election message to its neighboring node with the highest ID.
4. **Message Forwarding**:
- Nodes forward the election message to their neighboring nodes.
5. **Election Propagation**:
- The election message travels along the ring until it reaches the node with the highest ID.
6. **Election Resolution**:
- The node with the highest ID becomes the leader and sends a victory message back along
the ring.
7. **Leader Announcement**:
- All nodes acknowledge the new leader.
8. **Leader Heartbeat**:
- The new leader periodically sends heartbeat messages to confirm its status.
By following these 10 steps, you can implement Bully and Ring algorithms for leader election in
a distributed system, ensuring decentralized leader selection with reliability and efficiency.
Code:-
import java.util.Scanner;
// create process class for creating a process having id and status
class Process {
public int id;
public String status;
public Process(int id) {
this.id = id;
this.status = "active";
}
}
public class BullyRing {
Scanner sc;
Process[] processes;
int n;
// initialize Scanner class object in constructor
public BullyRing() {
sc = new Scanner(System.in);
}
// create ring() method for initializing the ring
public void ring() {
// get input from the user for processes
System.out.print("Enter total number of processes: ");
n = sc.nextInt();
// initialize processes array
processes = new Process[n];
for (int i = 0; i < n; i++) {
processes[i] = new Process(i);
}
}
// create election() method for electing process
public void performElection() {
// we use the sleep() method to stop the execution of the current thread
try {
Thread.sleep(1000);
} catch (InterruptedException e) {
e.printStackTrace();
}
// show failed process
System.out.println("Process " + processes[getMaxValue()].id + " fails");
// change status to Inactive of the failed process
processes[getMaxValue()].status = "Inactive";
int idOfInitiator = 0;
boolean overStatus = true;
while (overStatus) {
boolean higherProcesses = false;
// iterate all the processes
System.out.println();
for (int i = idOfInitiator + 1; i < n; i++) {
if (processes[i].status == "active") {
System.out.println("Process " + idOfInitiator + " Passes
Election(" + idOfInitiator + ") message to Process " + i);
higherProcesses = true;
}
}
// check for higher process
if (higherProcesses) {
System.out.println();
for (int i = idOfInitiator + 1; i < n; i++) {
if (processes[i].status == "active") {
System.out.println("Process " + i + " passes Ok(" + i
+ ") message to Process " + idOfInitiator);
}
}
idOfInitiator++;
}
else {
// get the last process from the processes that will become
coordinator
int coord = processes[getMaxValue()].id;
// show process that becomes the coordinator
System.out.println("Finally Process " + coord + " Becomes
Coordinator");
for (int i = coord - 1; i >= 0; i--) {
if (processes[i].status == "active") {
System.out.println("Process " + coord + " passes
Coordinator(" + coord + ") message to Process " + i);
}
}
System.out.println("\nEnd of Election");
overStatus = false;
break;
}
}
}
// create getMaxValue() method that returns index of max process
public int getMaxValue() {
int mxId = -99;
int mxIdIndex = 0;
for (int i = 0; i < processes.length; i++) {
if (processes[i].status == "active" && processes[i].id > mxId) {
mxId = processes[i].id;
mxIdIndex = i;
}
}
return mxIdIndex;
}
public static void main(String[] args) {
BullyRing bully = new BullyRing();
bully.ring();
bully.performElection();
}
}
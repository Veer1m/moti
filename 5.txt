Steps:-
1. **Token Initialization**: Start with a token that circulates among the nodes in the system.
2. **Request for Critical Section**: When a node wants to enter the critical section, it waits until it
possesses the token.
3. **Use Critical Section**: Once a node possesses the token, it enters the critical section and
executes its task.
4. **Pass Token**: After completing the critical section, the node passes the token to the next
node in the ring.
5. **Repeat**: Nodes continue to pass the token around the ring, allowing each node to enter
the critical section one at a time.
By following these steps, mutual exclusion can be achieved in a distributed system using a
token ring based algorithm, ensuring that only one node accesses the critical section at a time.
Code:-
import java.util.*;
public class TokenRing {
private int n; // Number of processes
private int[] state;
Name: Piyush Navin Gundecha
Roll No. - 3061
Subject: Distributed System
Assignment 5
private boolean token;
public TokenRing(int n) {
this.n = n;
state = new int[n];
}
public void run() {
// Initialize the ring
for (int i = 0; i < n; i++) {
state[i] = 0; // not in critical section
}
// Randomly select the process that will hold the token initially
int curr = new Random().nextInt(n);
token = true;
while (true) {
if (token) {
if (state[curr] == 0) { // not in critical section
enterCritical(curr);
state[curr] = 1; // in critical section
} else { // in critical section
exitCritical(curr);
state[curr] = 0; // not in critical section
curr = (curr + 1) % n; // pass the token
token = true;
}
}
}
}
private void enterCritical(int id) {
// Enter critical section
System.out.println("Process " + id + " enters critical section");
}
private void exitCritical(int id) {
// Exit critical section
System.out.println("Process " + id + " exits critical section");
token = false;
}
public static void main(String[] args) {
Scanner sc = new Scanner(System.in);
System.out.print("Enter Number of Processes To Be Created: ");
int n = sc.nextInt();
sc.close();
TokenRing tr = new TokenRing(n); // Instantiate a ring of n processes
tr.run(); // Run the token ring algorithm
}
}
Commands:
~/Documents/assignments$ javac TokenRing.java
~/Documents/assignments$ java TokenRing*/